1684608853
waR3U4bTeM%3A8fc272d8b7cb5d390d7e0c75ffb064a0-13d161f2e9ab928ddc512b7a4e611598
s:108068:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"13d161f2e9ab928ddc512b7a4e611598";s:39:" phpDocumentor\Reflection\Php\File name";s:36:"b9ed8c80b7db5ce8aae22c56a3beba41.php";s:39:" phpDocumentor\Reflection\Php\File path";s:58:"var/cache/dev/twig/b9/b9ed8c80b7db5ce8aae22c56a3beba41.php";s:41:" phpDocumentor\Reflection\Php\File source";s:64359:"<?php

use Twig\Environment;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Extension\SandboxExtension;
use Twig\Markup;
use Twig\Sandbox\SecurityError;
use Twig\Sandbox\SecurityNotAllowedTagError;
use Twig\Sandbox\SecurityNotAllowedFilterError;
use Twig\Sandbox\SecurityNotAllowedFunctionError;
use Twig\Source;
use Twig\Template;

/* project/home.html.twig */
class __TwigTemplate_c3aac6362208b28a74507b49f50c7b57 extends Template
{
    private $source;
    private $macros = [];

    public function __construct(Environment $env)
    {
        parent::__construct($env);

        $this->source = $this->getSourceContext();

        $this->parent = false;

        $this->blocks = [
        ];
    }

    protected function doDisplay(array $context, array $blocks = [])
    {
        $macros = $this->macros;
        $__internal_5a27a8ba21ca79b61932376b2fa922d2 = $this->extensions["Symfony\\Bundle\\WebProfilerBundle\\Twig\\WebProfilerExtension"];
        $__internal_5a27a8ba21ca79b61932376b2fa922d2->enter($__internal_5a27a8ba21ca79b61932376b2fa922d2_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "project/home.html.twig"));

        $__internal_6f47bbe9983af81f1e7450e9a3e3768f = $this->extensions["Symfony\\Bridge\\Twig\\Extension\\ProfilerExtension"];
        $__internal_6f47bbe9983af81f1e7450e9a3e3768f->enter($__internal_6f47bbe9983af81f1e7450e9a3e3768f_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "project/home.html.twig"));

        // line 1
        $this->loadTemplate("/project/main.html.twig", "project/home.html.twig", 1)->display($context);
        // line 2
        echo "
<body>

    <div class=\"content\">
        <h2>BEKÄMPA KLIMATFÖRÄNDRINGARNA</h2>
        <br>
        <p>
        Åren på 1820-talet gjorde Joseph Fourier upptäckten av växthuseffekten. Men så sent som 1896 gjordes första undesökning inom området kvantitativt av svenska Svante Arrhenius och 
        presenterade terorin att koldioxid påverkar jordens medeltemperatur. Många år har gått sedan dess. Många upptäckter och flera år av forkning tills ämnet kommer upp till debatt hösten 2009 om FN:s klimatpanel IPCC och dess slutsatser att
        mänskliga utslätt av växthusgaser, främst koldioxid, höjer jordens medeltemperatur. WWF skriver på deras hemsida angående klimarförändringen.
        </p>
        <br>
        <blockquote cite=\"https://www.globalamalen.se/om-globala-malen/mal-13-bekampa-klimatforandringarna/\">
        <i>Den globala uppvärmningen och klimatförändringarna får katastrofala följder, som global avsmältning av glaciärer, 
        höjda havsnivåer, fler och mer intensiva extremväder som perioder av extremhetta, torka, skyfall, stormar som i sin tur ökar risken för följder som skogsbränder och översvämningar. De fattigaste och mest sårbara människorna på vår planet drabbas hårt,
        bland annat på grund av hotad livsmedelsproduktion, men även vi i Sverige kommer att drabbas allt oftare. Därtill hotas viktiga arter, livsmiljöer och hela ekosystem. Nu räknas varje tiondels grad.\". Kortfattat är slutsatsen att mycket har hänt sedan första 
        upptäckten av Fourier, för omkring 200 år sedan.  <a href=\"https://www.wwf.se/klimat/klimatforandringar/\">Läs mer</a></i>
        </blockquote>
        <br>
        <p>
        Från data samlad genom SMHI, <a href=\"https://www.smhi.se/klimat/klimatet-da-och-nu/klimatindikatorer/klimatindikator-temperatur-1.2430\">läs mer här</a></i>, angående klimatindikatoren temperatur kan vi se samlad data nedan från 2017 till 2020. Övriga klimatindikatorer är:
        snö, extrem nederbörd, maximal isutbredning, havsnivå, silinstrålning, geostrofisk vind, vegetationsperiodens längd och vårflodsstart.
        Datan nedan fokuserar på temperatur och beskriver medeltemperatur i Sverige per år. Data från 1860 fram till 2017, är uteslutet från tabellen nedan. Då datan från mål 13 som data presenteras längre ned på denna sida inkluderar data från 2017 till 2018 är detta den mest relevanta datan från tidsperioden.
        Datan är framtagen genom mätningar i olika åstider utspritt genom hela landet. Genom att granska datan kan man inte se en drastisk förändring genom tid. Men sedan slutet av 1800-talet har Sveriges medeltemperatur ökat med två grader. SMHI beskriver att tydligast kan man se en förändring att våren då utbredningen av snö och is minskat,
        vilket gör att vårsolen snabbare kan omvändlas till uppvärmning av luft. Antalet riktigt kalla vintrar har även minskat sedan år 1990.
        Frågan är varför klimatindikatorn temperatur är så viktig. SMHI beskriver detta, 
        </p>
        <br>
        <blockquote cite=\"https://www.globalamalen.se/om-globala-malen/mal-13-bekampa-klimatforandringarna/\">
        <i>När vi talar om klimatförändringar är det framför allt förändringar i temperaturen vi tänker på. Den ökade mängden växthusgaser dämpar den utgående värmestrålningen från jordytan medan den inkommande solstrålningen inte påverkas. Detta leder till en ökad temperatur. Observationer av temperatur visar att medeltemperaturen stiger överallt i Sverige i linje med vad klimatmodeller visar. <br><br>
        I framtiden kan vi räkna med ytterligare uppvärmning och ökad risk för en rad olika extrema väderrelaterade händelser, som till exempel värmeböljor, skyfall och torka.  I Sverige ökar årsmedeltemperaturen ungefär dubbelt så snabbt som det globala genomsnittet. Detta kan ge allvarliga konsekvenser för människor, djur och växtliv. <br><br>
        Extremt höga temperaturer kan till exempel påverka människors hälsa, ekosystem, jordbruk, skogsbruk, transporter på land, vatten och i luft, med mera. <a href=\"https://www.smhi.se/klimat/klimatet-da-och-nu/klimatindikatorer/klimatindikator-temperatur-1.2430\">Läs mer</a></i>
        <br>
        </blockquote>
        <p><b>Medeltemperatur över tid.</b></p>
        <table>
            <th>År</th>
            <th>Medeltemperatur</th>
            ";
        // line 40
        $context['_parent'] = $context;
        $context['_seq'] = twig_ensure_traversable((isset($context["temp"]) || array_key_exists("temp", $context) ? $context["temp"] : (function () { throw new RuntimeError('Variable "temp" does not exist.', 40, $this->source); })()));
        foreach ($context['_seq'] as $context["_key"] => $context["i"]) {
            // line 41
            echo "                <tr>
                    <td>";
            // line 42
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "year", [], "any", false, false, false, 42), "html", null, true);
            echo "</td>
                    <td>";
            // line 43
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "middletemp", [], "any", false, false, false, 43), "html", null, true);
            echo " grader celcius</td>
                </tr>
            ";
        }
        $_parent = $context['_parent'];
        unset($context['_seq'], $context['_iterated'], $context['_key'], $context['i'], $context['_parent'], $context['loop']);
        $context = array_intersect_key($context, $_parent) + $_parent;
        // line 46
        echo "        </table>
        <br>
        <p style=\"text-align: right;\">Källa: SMHI</p>
        <br>
        <p>
        För att bekämpa klimatförändringen har FN:s medlemsländer antagit Agenda 2030, ett universiellt agenda som innehåller sjutton globala mål som ska uppfyllas till och med år 2030.
        </p>
        <br>
        <h4>Mål 13</h4>
        <br>
        <p>Följande citat från globalamalen.se beskriver mål 13 av dem globala målen för att bekämpa klimatförändring:</p>
        <blockquote cite=\"https://www.globalamalen.se/om-globala-malen/mal-13-bekampa-klimatforandringarna/\">
        <i>Det globala arbetet för att uppnå mål 13 och bekämpa klimatförändringarna konkretiseras ytterligare i Klimatkonventionen och Parisavtalet. 
        Klimatkonventionen är en global konvention med åtgärder för att stoppa klimatförändringarna. Klimatkonventionen undertecknades vid FN:s konferens om miljö och utveckling
        i Rio 1992. Till Klimatkonventionen hör Parisavtalet, ett globalt klimatavtal som trädde i kraft 2016. Parisavtalet slår fast att den globala temperaturökningen ska 
        begränsas till under två grader, med strävan efter att begränsa den till 1,5 grader. Detta ska framförallt uppnås genom att minska utsläppen av växthusgaser. En annan 
        del av avtalet handlar om att ge stöd till dem som drabbas av klimatförändringarnas effekter och öka möjligheterna till klimatanpassning. <a href=\"https://www.globalamalen.se/om-globala-malen/mal-13-bekampa-klimatforandringarna/\">Läs mer</a>
        </i></blockquote>

        <br>
        <h3>Nationell indikatorer:</h3>
        <h5>Punkt 13.2.2 inom mål 13: Utsläpp av växthusgaser per bransch, territorium och ekonomisk utveckling.</h5>
        <br>
        <p><b>Utsläpp av växthusgaser per aggregerad näringsgren SNI 2007.</b></p>
        <p><i>Enhet:</i> Tusen ton koldioxidekvivalenter</p>
        <table>
            <th>Område</th>
            <th>2008</th>
            <th>2009</th>
            <th>2010</th>
            <th>2011</th>
            <th>2012</th>
            <th>2013</th>
            <th>2014</th>
            <th>2015</th>
            <th>2016</th>
            <th>2017</th>
            ";
        // line 83
        $context['_parent'] = $context;
        $context['_seq'] = twig_ensure_traversable((isset($context["climate"]) || array_key_exists("climate", $context) ? $context["climate"] : (function () { throw new RuntimeError('Variable "climate" does not exist.', 83, $this->source); })()));
        foreach ($context['_seq'] as $context["_key"] => $context["i"]) {
            // line 84
            echo "                <tr>
                    <td>";
            // line 85
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "field", [], "any", false, false, false, 85), "html", null, true);
            echo "</td>
                    <td>";
            // line 86
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "eight", [], "any", false, false, false, 86), "html", null, true);
            echo "</td>
                    <td>";
            // line 87
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "nine", [], "any", false, false, false, 87), "html", null, true);
            echo "</td>
                    <td>";
            // line 88
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "ten", [], "any", false, false, false, 88), "html", null, true);
            echo "</td>
                    <td>";
            // line 89
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "eleven", [], "any", false, false, false, 89), "html", null, true);
            echo "</td>
                    <td>";
            // line 90
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "twelve", [], "any", false, false, false, 90), "html", null, true);
            echo "</td>
                    <td>";
            // line 91
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "thirteen", [], "any", false, false, false, 91), "html", null, true);
            echo "</td>
                    <td>";
            // line 92
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "fourteen", [], "any", false, false, false, 92), "html", null, true);
            echo "</td>
                    <td>";
            // line 93
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "fifteen", [], "any", false, false, false, 93), "html", null, true);
            echo "</td>
                    <td>";
            // line 94
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "sixteen", [], "any", false, false, false, 94), "html", null, true);
            echo "</td>
                    <td>";
            // line 95
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "seventeen", [], "any", false, false, false, 95), "html", null, true);
            echo "</td>
                </tr>
            ";
        }
        $_parent = $context['_parent'];
        unset($context['_seq'], $context['_iterated'], $context['_key'], $context['i'], $context['_parent'], $context['loop']);
        $context = array_intersect_key($context, $_parent) + $_parent;
        // line 98
        echo "        </table>
        <br>
        <p style=\"text-align: right;\">Källa: SCB, Miljöräkenskaper</p>
        <br>
        <br>

        <table style=\"border-spacing: 4px; border-collapse: separate\"> 
        <tr> 
        <td style=\"height: 50px; width: 50px; background-color: mediumseagreen\"> Arbetsmaskiner
        <td style=\"height: 50px; width: 50px; background-color: plum\"> Avfall
        <td style=\"height: 50px; width: 50px; background-color: NavajoWhite\"> El och fjärrvärme
        <td style=\"height: 50px; width: 50px; background-color: OliveDrab\"> Industri
        <td style=\"height: 50px; width: 50px; background-color: SkyBlue\"> Inrikes transporter
        <td style=\"height: 50px; width: 50px; background-color: Tomato\"> Jordbruk
        <td style=\"height: 50px; width: 50px; background-color: Turquoise\"> Lösningsmedel och övrig produktanvänding
        <td style=\"height: 50px; width: 50px; background-color: YellowGreen\"> Uppvärmning av bostäder och lokaler
        </tr> 

        </table> 
        <br>
        <p>Procentuell förändring över tid från 2008 till 2017. Det totala ustäppet har gått från 62567 år 2008 till 52660 år 2017. Det är en procentuell minskning på <font color=”#FF0000″><b>-26%</b></font> inom området.
        Färgschemat ovan bskriver procentuella förändringen för varje område, beskrivande av färg.
        </p>
        <div class=\"pie animate\" style=\"--p:8;--c:mediumseagreen\"> -8%</div>
        <div class=\"pie animate\" style=\"--p:42;--c:plum;--b:10px\"> -42%</div>
        <div class=\"pie animate\" style=\"--p:20;--c:NavajoWhite;--b:15px\"> -20%</div>
        <div class=\"pie animate\" style=\"--p:27;--c:OliveDrab;\"> -27%</div>
        <div class=\"pie animate\" style=\"--p:19;--c:SkyBlue\"> -19%</div>
        <div class=\"pie animate\" style=\"--p:3;--c:Tomato\"> 3%</div>
        <div class=\"pie animate\" style=\"--p:5;--c:Turquoise;--b:10px\"> -5%</div>
        <div class=\"pie animate\" style=\"--p:51;--c:YellowGreen;--b:5px\"> -51%</div>
        <br>
        <p>Om man granskar det visuella diagrammet ovan kan man se en tydlig procentuell minskning inom alla näringsgrenar förutom Jordbruk, där utsläppet har ett genomsnitt på samma värde från 2008.
        Värdet 2017, dessvärre är en ökning från 2008. Vilket beskriver den enda näringgrenen som inte har en minskning av växthusgaser. Enligt data från Naturvårdsverket kan det konstateras att köttproduktion och konsumtion har ökat genon åren. 
        Samt konsumtion av ost. Medan konsumtion av mjölk har minskat med -27%. <a href=\"https://www.naturvardsverket.se/data-och-statistik/\">Läs mer</a>. Medan denna näringsgren inte visar någon tydlig förbättring ser man istället en avsevärd
        procentuell minskning i grenen avfall och uppvärming av bostäder och lokaler som istället visar en minskning på motsvarande -42% och -51%. Industrin har följt med genomsnittliga procentuella förändingen som är beskriven av totalen,
        det vill säga totala -26% där industrin har minskat med -26%. El och fjärrvärme har minskat med -20 procent medan lösningsmedel och övrig produktanvänding samt arbetsmaskiner beskriver mindre förändringar. 
        </p>
        <br>
        <p><b>Utsläpp av växthusgaser per sektor:</b></p>
        <br>
        <p><i>Enhet:</i> Tusen ton koldioxidekvivalenter</p>
        <table>
            <th>Område</th>
            <th>2008</th>
            <th>2009</th>
            <th>2010</th>
            <th>2011</th>
            <th>2012</th>
            <th>2013</th>
            <th>2014</th>
            <th>2015</th>
            <th>2016</th>
            <th>2017</th>
            ";
        // line 152
        $context['_parent'] = $context;
        $context['_seq'] = twig_ensure_traversable((isset($context["sni"]) || array_key_exists("sni", $context) ? $context["sni"] : (function () { throw new RuntimeError('Variable "sni" does not exist.', 152, $this->source); })()));
        foreach ($context['_seq'] as $context["_key"] => $context["i"]) {
            // line 153
            echo "                <tr>
                    <td>";
            // line 154
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "field", [], "any", false, false, false, 154), "html", null, true);
            echo "</td>
                    <td>";
            // line 155
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "eight", [], "any", false, false, false, 155), "html", null, true);
            echo "</td>
                    <td>";
            // line 156
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "nine", [], "any", false, false, false, 156), "html", null, true);
            echo "</td>
                    <td>";
            // line 157
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "ten", [], "any", false, false, false, 157), "html", null, true);
            echo "</td>
                    <td>";
            // line 158
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "eleven", [], "any", false, false, false, 158), "html", null, true);
            echo "</td>
                    <td>";
            // line 159
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "twelve", [], "any", false, false, false, 159), "html", null, true);
            echo "</td>
                    <td>";
            // line 160
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "thirteen", [], "any", false, false, false, 160), "html", null, true);
            echo "</td>
                    <td>";
            // line 161
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "fourteen", [], "any", false, false, false, 161), "html", null, true);
            echo "</td>
                    <td>";
            // line 162
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "fifteen", [], "any", false, false, false, 162), "html", null, true);
            echo "</td>
                    <td>";
            // line 163
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "sixteen", [], "any", false, false, false, 163), "html", null, true);
            echo "</td>
                    <td>";
            // line 164
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "seventeen", [], "any", false, false, false, 164), "html", null, true);
            echo "</td>
                </tr>
            ";
        }
        $_parent = $context['_parent'];
        unset($context['_seq'], $context['_iterated'], $context['_key'], $context['i'], $context['_parent'], $context['loop']);
        $context = array_intersect_key($context, $_parent) + $_parent;
        // line 167
        echo "        </table>
        <br>
        <p style=\"text-align: right;\">Källa: Naturvårdsverket</p>
        <br>
        <br>

        <table style=\"border-spacing: 4px; border-collapse: separate\"> 
        <tr> 
        <td style=\"height: 50px; width: 50px; background-color: darkred\"> Jordbruk, skogsbruk och fiske
        <td style=\"height: 50px; width: 50px; background-color: darkblue\"> Utvinning av miniral
        <td style=\"height: 50px; width: 50px; background-color: purple\"> Tillverkningsindustri
        <td style=\"height: 50px; width: 50px; background-color: orange\"> El, gas och värmeverk samt vatten, avlopp och avfall
        <td style=\"height: 50px; width: 50px; background-color: lightgreen\"> Byggverksamhet
        <td style=\"height: 50px; width: 50px; background-color: coral\"> Transportindustri
        <td style=\"height: 50px; width: 50px; background-color: Chocolate\"> Övriga tjänster
        <td style=\"height: 50px; width: 50px; background-color: DarkGreen\"> Offentlig sektor
        <td style=\"height: 50px; width: 50px; background-color: hotpink\"> Hushåll och ideella föreningar
        </tr> 

        </table> 
        <br>
        <p>Motsvarande procentuell del av totala utsläppet 72,145 (Utsläpp av växthusgaser per bransch) i fallande ordning i tabellen \"Utsläpp av växthusgaser per sektor\" år 2008.</p>
        <div class=\"pie animate\" style=\"--p:13\"> 13%</div>
        <div class=\"pie animate\" style=\"--p:0.5;--c:darkblue;--b:10px\"> 0,1%</div>
        <div class=\"pie animate\" style=\"--p:25;--c:purple;--b:15px\"> 25%</div>
        <div class=\"pie animate\" style=\"--p:14;--c:orange;\"> 14%</div>
        <div class=\"pie animate\" style=\"--p:0.5;--c:lightgreen\"> 0,2%</div>
        <div class=\"pie animate\" style=\"--p:21;--c:coral\"> 21%</div>
        <div class=\"pie animate\" style=\"--p:6;--c:Chocolate;--b:10px\"> 6%</div>
        <div class=\"pie animate\" style=\"--p:1;--c:DarkGreen;--b:5px\"> 1%</div>
        <div class=\"pie animate\" style=\"--p:16;--c:hotpink;\"> 16%</div>

        <br>
        <p>I jämförande mot procentuella delar ovan efter en tio års period, kan procentuell del av utsläppet 63,272 (Utsläpp av växthusgaser per bransch) ses nedan. Värderna är i fallande ordning från tabellen \"Utsläpp av växthusgaser per sektor\" år 2017.</p>
        <p>Färgerna kvarstår för tydligare visuell jämförelse.</p>
        <div class=\"pie animate\" style=\"--p:14\"> 14%</div>
        <div class=\"pie animate\" style=\"--p:2;--c:darkblue;--b:10px\"> 2%</div>
        <div class=\"pie animate\" style=\"--p:23;--c:purple;--b:15px\"> 23%</div>
        <div class=\"pie animate\" style=\"--p:13;--c:orange;\"> 13%</div>
        <div class=\"pie animate\" style=\"--p:3;--c:lightgreen\"> 3%</div>
        <div class=\"pie animate\" style=\"--p:22;--c:coral\"> 22%</div>
        <div class=\"pie animate\" style=\"--p:5;--c:Chocolate;--b:10px\"> 5%</div>
        <div class=\"pie animate\" style=\"--p:1;--c:DarkGreen;--b:5px\"> 1%</div>
        <div class=\"pie animate\" style=\"--p:14;--c:hotpink;\"> 14%</div>

        <p>Genom att först titta på det totala utsläpp av växthusgaser per branch totalt för år 2008 72,145 tusen ton koldioxidekvivalenter medan 2017 hade ett ustläpp på 63,272 tusen ton koldioxidekvivalenter.
        Kan vi se en minskning med 8,873 tusen ton koldioxidekvivalenter. Det är en procentuell minskning med ungefär <font color=”#FF0000″><b>22%</b></font>. Det är en tydlig minskning, med ett snitt på 2,2% per år.
        Genom tabellen och visuelliseringen av procentuella delarna kan man tydligt se att alla brancher har ungefärligt följt med kurvan av minskningen av utsläpp. Jordbruk, skogsbruk och fiske och transportindustrin, 
        byggverksamhet är dem enda brancherna med en procentuell ökning. Dock kan det påpekas att dessa har följt med utvecklingen, annars hade procentuella delen varit tydligt avvikande än det tidigare mätvärdet från 2007.
        Då ala tre brancherna med en procentuell stigning är ungefärligt med tidigare procent, samt genom att granska tabellen \"Utsläpp av växthusgaser per sektor\" syns en mätbar minskning av utsläpp.
        </p>

                <br>
        <p><b>BNP, fasta priser, Referensår 2015:</b></p>
        <br>
        <table>
            <th>Område</th>
            <th>2008</th>
            <th>2009</th>
            <th>2010</th>
            <th>2011</th>
            <th>2012</th>
            <th>2013</th>
            <th>2014</th>
            <th>2015</th>
            <th>2016</th>
            <th>2017</th>
            ";
        // line 234
        $context['_parent'] = $context;
        $context['_seq'] = twig_ensure_traversable((isset($context["bnp"]) || array_key_exists("bnp", $context) ? $context["bnp"] : (function () { throw new RuntimeError('Variable "bnp" does not exist.', 234, $this->source); })()));
        foreach ($context['_seq'] as $context["_key"] => $context["i"]) {
            // line 235
            echo "                <tr>
                    <td>";
            // line 236
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "field", [], "any", false, false, false, 236), "html", null, true);
            echo "</td>
                    <td>";
            // line 237
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "eight", [], "any", false, false, false, 237), "html", null, true);
            echo "</td>
                    <td>";
            // line 238
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "nine", [], "any", false, false, false, 238), "html", null, true);
            echo "</td>
                    <td>";
            // line 239
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "ten", [], "any", false, false, false, 239), "html", null, true);
            echo "</td>
                    <td>";
            // line 240
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "eleven", [], "any", false, false, false, 240), "html", null, true);
            echo "</td>
                    <td>";
            // line 241
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "twelve", [], "any", false, false, false, 241), "html", null, true);
            echo "</td>
                    <td>";
            // line 242
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "thirteen", [], "any", false, false, false, 242), "html", null, true);
            echo "</td>
                    <td>";
            // line 243
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "fourteen", [], "any", false, false, false, 243), "html", null, true);
            echo "</td>
                    <td>";
            // line 244
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "fifteen", [], "any", false, false, false, 244), "html", null, true);
            echo "</td>
                    <td>";
            // line 245
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "sixteen", [], "any", false, false, false, 245), "html", null, true);
            echo "</td>
                    <td>";
            // line 246
            echo twig_escape_filter($this->env, twig_get_attribute($this->env, $this->source, $context["i"], "seventeen", [], "any", false, false, false, 246), "html", null, true);
            echo "</td>
                </tr>
            ";
        }
        $_parent = $context['_parent'];
        unset($context['_seq'], $context['_iterated'], $context['_key'], $context['i'], $context['_parent'], $context['loop']);
        $context = array_intersect_key($context, $_parent) + $_parent;
        // line 249
        echo "        </table>
        
        <br>
        <p style=\"text-align: right;\">Källa: SCB, Nationalräkenskaperna</p>
        <br>
        <br>
        <table style=\"border-spacing: 4px; border-collapse: separate\"> 
        <tr> 
        <td style=\"height: 50px; width: 50px; background-color: mediumseagreen\"> 2008
        <td style=\"height: 50px; width: 50px; background-color: plum\"> 2009
        <td style=\"height: 50px; width: 50px; background-color: NavajoWhite\"> 2010
        <td style=\"height: 50px; width: 50px; background-color: OliveDrab\"> 2011
        <td style=\"height: 50px; width: 50px; background-color: SkyBlue\"> 2012
        <td style=\"height: 50px; width: 50px; background-color: Tomato\"> 2013
        <td style=\"height: 50px; width: 50px; background-color: Turquoise\"> 2014
        <td style=\"height: 50px; width: 50px; background-color: YellowGreen\"> 2015
        <td style=\"height: 50px; width: 50px; background-color: Purple\"> 2016
        <td style=\"height: 50px; width: 50px; background-color: red\"> 2017
        </tr>
        </table>

        <p>
        Med frågan \"Vem släppet ut?\" kan komsumtionsperspektivet svara på frågan \"För vem görs utsläppen?\" beskriver Statistiskamyndigheten, SCB kopplingen mellan BNP och klimatpåverkan. Nedan kan vi se ett visuellt stapeldiagram för presenterar BNP per år i årsperioden 2008 till 2017. Färgen ovan indikerar året i diagrammet nedan.
        </p>

  <div class=\"chart-container\">
    <div class=\"base\"></div>

    <ul class=\"meter\">
      <li><div>4,000,000</div></li>
      <li><div>3,500,000</div></li>
      <li><div>3,000,000</div></li>
      <li><div>2,500,000</div></li>
      <li><div>Mindre än 2,000,000</div></li>
    </ul>
    <!-- Background-Grid -->
    <table>
      <tr>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
      <tr>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
      <tr>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
      <tr>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
      <tr>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
    </table>
    <!-- End Background Grid -->
   
    <div class=\"bar two\"></div>   
    <div class=\"bar three\"></div>
    <div class=\"bar four\"></div>   
    <div class=\"bar five\"></div>   
    <div class=\"bar six\"></div>
    <div class=\"bar seven\"></div>   
    <div class=\"bar eight\"></div> 
    <div class=\"bar nine\"></div> 
    <div class=\"bar ten\"></div> 
    <div class=\"bar eleven\"></div> 
  </div>
    <p>
       Både konsumenten och producenten kan påverka utsläppen och naturresursanvändningen, men detta på olika sätt. Ovan i tidigare diagram har vi skådat producenten i största mån i sektorer och näringgrenar. 
       SCB beskriver,
    </p>
       <br>
        <blockquote cite=\"https://www.scb.se/hitta-statistik/statistik-efter-amne/miljo/miljoekonomi-och-hallbar-utveckling/miljorakenskaper/produktrelaterat/Fordjupad-information/miljorakenskaperna-visar-hur-ekonomin-paverkar-miljo-och-naturresurser/\">
        <i>De branscher som ligger tidigt i förädlingsvärdekedjan, som gruvor, jordbruk, skogsbruk, fiske, raffinaderier och tung industri, har generellt en större energianvändning och miljöpåverkan än de som ligger längre fram i förädlingsvärdeskedjan. Samtidigt är olika ekonomiska aktörer beroende av varandra för leveranser av insatsvaror och utbyten, innovationer och mycket annat. <a href=\"https://www.scb.se/hitta-statistik/statistik-efter-amne/miljo/miljoekonomi-och-hallbar-utveckling/miljorakenskaper/produktrelaterat/Fordjupad-information/miljorakenskaperna-visar-hur-ekonomin-paverkar-miljo-och-naturresurser/\">Läs mer</a>
        </i></blockquote>
        <br>
    <p>
      På så vis är det vi tidigare granskat en viktig del i klimatfrågan. Näringsgrenar och sektorer har stor påverkan. Genom energi förbrukning kan klimatpåverkan räknas. Dock har olika energislag olika miljöpåverkan. 
      Produktion coh konsumtion beskriver ramen av landets ekonomi. Genom att granska BPN kan eventuella kopplingar mellan exemoelvis ekenomisk tillväxt och miljöpåverkan granskas. Efterfrågan, produktion och leverans har en stark koppling till både den ekenomiska faktoren, branchbundna faktoren och den privata faktoren. Individens påverkan och näringsgrenens påverkan. Genom en modell som det internationella organisationen för ekonomisk samarbete och utveckling (OECD) och Europeiska miljöbyrån har utvecklat en modell som beskriver just detta samband, hur ett eller flera miljöområden påverkas av hur samhället eller ekonomin ser ut. 
      Denna modell kallas för DPSIR och står för drivkrafter, påverkan, status, inverkan och respons. Genom denna modell har det konstaterats att den ekonomiska bilden i varje nation påverkar den miljömässiga aspekten. Denna metod används i uppföljningen av Agenda 2030. SCB utvecklar detta,
    </p>
       <br>
        <blockquote cite=\"https://www.scb.se/hitta-statistik/statistik-efter-amne/miljo/miljoekonomi-och-hallbar-utveckling/miljorakenskaper/produktrelaterat/Fordjupad-information/miljorakenskaperna-visar-hur-ekonomin-paverkar-miljo-och-naturresurser/\">
        <i>Alltmer jämförbar statistik produceras om kopplingen mellan miljö och ekonomi. Statistiken kan ligga till grund för till exempel klimatpolitiska beslut. Där behövs fakta och underlag som visar vilka ekonomiska styrmedel som fungerar. Besluten kan sedan få effekt på utsläppen av växthusgaser och minska den negativa påverkan på miljön. <a href=\"https://www.scb.se/hitta-statistik/statistik-efter-amne/miljo/miljoekonomi-och-hallbar-utveckling/miljorakenskaper/produktrelaterat/Fordjupad-information/miljorakenskaperna-visar-hur-ekonomin-paverkar-miljo-och-naturresurser/\">Läs mer</a>
        </i></blockquote>
        <br>
    <p>
    Vi kan genom datan vi granskat för mål 13 konstatera följande; sektorer, näringgrenar och ekonomsika faktorer har en påverkan på mijön genom utsläpp, resursförbrukning och energiförbrukning. Genom mål 13, där målet är att minska just dessa faktorer har en föränding börjat att ske genom mätbara värden av utsläpp av koldioxidekvivalenter. Målet är under arbete och fler förändringar kommer förhoppningsvis att ske inom framtiden genom att granska data. Utvecklingskurvan har idag en positiv trend. Så vi hoppas att framtiden har en av samma slag.
    </p>
    <br>
    <h3>Källförteckning</h3>
    <p><br>
    <b>Webbkällor</b>
    <br><br>
    13 bekämpa klimat förändringarna. (2021, december 27). UNDP. https://www.globalamalen.se/om-globala-malen/mal-13-bekampa-klimatforandringarna/ (Hämtad 2022-05-12).
    <br><br>
    Global uppvärmning. (2022, april 4). Wikipedia. https://sv.wikipedia.org/wiki/Global_uppv%C3%A4rmning (Hämtad 2022-05-12).
    <br><br>
    Indikatorer för hållbar utveckling. Statistiskmyndigheten, SCB. https://www.scb.se/hitta-statistik/statistik-efter-amne/miljo/miljoekonomi-och-hallbar-utveckling/indikatorer-for-hallbar-utveckling/ (Hämtad 2022-05-13).
    <br><br>
    Klimatförändringarna. WWF. https://www.wwf.se/klimat/klimatforandringar/ (Hämtad 2022-05-13).
    <br><br>
    Miljöräkenskaperna visar hur ekonomin påverkar miljö och naturresurser. Statistiskmyndigheten, SCB. https://www.scb.se/hitta-statistik/statistik-efter-amne/miljo/miljoekonomi-och-hallbar-utveckling/miljorakenskaper/produktrelaterat/Fordjupad-information/miljorakenskaperna-visar-hur-ekonomin-paverkar-miljo-och-naturresurser/ (Hämtad 2022-05-14).
    <br><br>
    Svensk konsumtion och produktion av mjölk och ost. Naturvårdsverket. https://sv.wikipedia.org/wiki/Global_uppv%C3%A4rmning (Hämtad 2022-05-14).
    <br><br>
    Svensk konsumtion och produktion av kött. Naturvårdsverket. https://sv.wikipedia.org/wiki/Global_uppv%C3%A4rmning (Hämtad 2022-05-14).
    </p>
  </div>
    
</body>

";
        // line 400
        $this->loadTemplate("footer.html.twig", "project/home.html.twig", 400)->display($context);
        
        $__internal_5a27a8ba21ca79b61932376b2fa922d2->leave($__internal_5a27a8ba21ca79b61932376b2fa922d2_prof);

        
        $__internal_6f47bbe9983af81f1e7450e9a3e3768f->leave($__internal_6f47bbe9983af81f1e7450e9a3e3768f_prof);

    }

    public function getTemplateName()
    {
        return "project/home.html.twig";
    }

    public function isTraitable()
    {
        return false;
    }

    public function getDebugInfo()
    {
        return array (  590 => 400,  437 => 249,  428 => 246,  424 => 245,  420 => 244,  416 => 243,  412 => 242,  408 => 241,  404 => 240,  400 => 239,  396 => 238,  392 => 237,  388 => 236,  385 => 235,  381 => 234,  312 => 167,  303 => 164,  299 => 163,  295 => 162,  291 => 161,  287 => 160,  283 => 159,  279 => 158,  275 => 157,  271 => 156,  267 => 155,  263 => 154,  260 => 153,  256 => 152,  200 => 98,  191 => 95,  187 => 94,  183 => 93,  179 => 92,  175 => 91,  171 => 90,  167 => 89,  163 => 88,  159 => 87,  155 => 86,  151 => 85,  148 => 84,  144 => 83,  105 => 46,  96 => 43,  92 => 42,  89 => 41,  85 => 40,  45 => 2,  43 => 1,);
    }

    public function getSourceContext()
    {
        return new Source("{% include '/project/main.html.twig' %}

<body>

    <div class=\"content\">
        <h2>BEKÄMPA KLIMATFÖRÄNDRINGARNA</h2>
        <br>
        <p>
        Åren på 1820-talet gjorde Joseph Fourier upptäckten av växthuseffekten. Men så sent som 1896 gjordes första undesökning inom området kvantitativt av svenska Svante Arrhenius och 
        presenterade terorin att koldioxid påverkar jordens medeltemperatur. Många år har gått sedan dess. Många upptäckter och flera år av forkning tills ämnet kommer upp till debatt hösten 2009 om FN:s klimatpanel IPCC och dess slutsatser att
        mänskliga utslätt av växthusgaser, främst koldioxid, höjer jordens medeltemperatur. WWF skriver på deras hemsida angående klimarförändringen.
        </p>
        <br>
        <blockquote cite=\"https://www.globalamalen.se/om-globala-malen/mal-13-bekampa-klimatforandringarna/\">
        <i>Den globala uppvärmningen och klimatförändringarna får katastrofala följder, som global avsmältning av glaciärer, 
        höjda havsnivåer, fler och mer intensiva extremväder som perioder av extremhetta, torka, skyfall, stormar som i sin tur ökar risken för följder som skogsbränder och översvämningar. De fattigaste och mest sårbara människorna på vår planet drabbas hårt,
        bland annat på grund av hotad livsmedelsproduktion, men även vi i Sverige kommer att drabbas allt oftare. Därtill hotas viktiga arter, livsmiljöer och hela ekosystem. Nu räknas varje tiondels grad.\". Kortfattat är slutsatsen att mycket har hänt sedan första 
        upptäckten av Fourier, för omkring 200 år sedan.  <a href=\"https://www.wwf.se/klimat/klimatforandringar/\">Läs mer</a></i>
        </blockquote>
        <br>
        <p>
        Från data samlad genom SMHI, <a href=\"https://www.smhi.se/klimat/klimatet-da-och-nu/klimatindikatorer/klimatindikator-temperatur-1.2430\">läs mer här</a></i>, angående klimatindikatoren temperatur kan vi se samlad data nedan från 2017 till 2020. Övriga klimatindikatorer är:
        snö, extrem nederbörd, maximal isutbredning, havsnivå, silinstrålning, geostrofisk vind, vegetationsperiodens längd och vårflodsstart.
        Datan nedan fokuserar på temperatur och beskriver medeltemperatur i Sverige per år. Data från 1860 fram till 2017, är uteslutet från tabellen nedan. Då datan från mål 13 som data presenteras längre ned på denna sida inkluderar data från 2017 till 2018 är detta den mest relevanta datan från tidsperioden.
        Datan är framtagen genom mätningar i olika åstider utspritt genom hela landet. Genom att granska datan kan man inte se en drastisk förändring genom tid. Men sedan slutet av 1800-talet har Sveriges medeltemperatur ökat med två grader. SMHI beskriver att tydligast kan man se en förändring att våren då utbredningen av snö och is minskat,
        vilket gör att vårsolen snabbare kan omvändlas till uppvärmning av luft. Antalet riktigt kalla vintrar har även minskat sedan år 1990.
        Frågan är varför klimatindikatorn temperatur är så viktig. SMHI beskriver detta, 
        </p>
        <br>
        <blockquote cite=\"https://www.globalamalen.se/om-globala-malen/mal-13-bekampa-klimatforandringarna/\">
        <i>När vi talar om klimatförändringar är det framför allt förändringar i temperaturen vi tänker på. Den ökade mängden växthusgaser dämpar den utgående värmestrålningen från jordytan medan den inkommande solstrålningen inte påverkas. Detta leder till en ökad temperatur. Observationer av temperatur visar att medeltemperaturen stiger överallt i Sverige i linje med vad klimatmodeller visar. <br><br>
        I framtiden kan vi räkna med ytterligare uppvärmning och ökad risk för en rad olika extrema väderrelaterade händelser, som till exempel värmeböljor, skyfall och torka.  I Sverige ökar årsmedeltemperaturen ungefär dubbelt så snabbt som det globala genomsnittet. Detta kan ge allvarliga konsekvenser för människor, djur och växtliv. <br><br>
        Extremt höga temperaturer kan till exempel påverka människors hälsa, ekosystem, jordbruk, skogsbruk, transporter på land, vatten och i luft, med mera. <a href=\"https://www.smhi.se/klimat/klimatet-da-och-nu/klimatindikatorer/klimatindikator-temperatur-1.2430\">Läs mer</a></i>
        <br>
        </blockquote>
        <p><b>Medeltemperatur över tid.</b></p>
        <table>
            <th>År</th>
            <th>Medeltemperatur</th>
            {% for i in temp %}
                <tr>
                    <td>{{ i.year }}</td>
                    <td>{{ i.middletemp }} grader celcius</td>
                </tr>
            {% endfor %}
        </table>
        <br>
        <p style=\"text-align: right;\">Källa: SMHI</p>
        <br>
        <p>
        För att bekämpa klimatförändringen har FN:s medlemsländer antagit Agenda 2030, ett universiellt agenda som innehåller sjutton globala mål som ska uppfyllas till och med år 2030.
        </p>
        <br>
        <h4>Mål 13</h4>
        <br>
        <p>Följande citat från globalamalen.se beskriver mål 13 av dem globala målen för att bekämpa klimatförändring:</p>
        <blockquote cite=\"https://www.globalamalen.se/om-globala-malen/mal-13-bekampa-klimatforandringarna/\">
        <i>Det globala arbetet för att uppnå mål 13 och bekämpa klimatförändringarna konkretiseras ytterligare i Klimatkonventionen och Parisavtalet. 
        Klimatkonventionen är en global konvention med åtgärder för att stoppa klimatförändringarna. Klimatkonventionen undertecknades vid FN:s konferens om miljö och utveckling
        i Rio 1992. Till Klimatkonventionen hör Parisavtalet, ett globalt klimatavtal som trädde i kraft 2016. Parisavtalet slår fast att den globala temperaturökningen ska 
        begränsas till under två grader, med strävan efter att begränsa den till 1,5 grader. Detta ska framförallt uppnås genom att minska utsläppen av växthusgaser. En annan 
        del av avtalet handlar om att ge stöd till dem som drabbas av klimatförändringarnas effekter och öka möjligheterna till klimatanpassning. <a href=\"https://www.globalamalen.se/om-globala-malen/mal-13-bekampa-klimatforandringarna/\">Läs mer</a>
        </i></blockquote>

        <br>
        <h3>Nationell indikatorer:</h3>
        <h5>Punkt 13.2.2 inom mål 13: Utsläpp av växthusgaser per bransch, territorium och ekonomisk utveckling.</h5>
        <br>
        <p><b>Utsläpp av växthusgaser per aggregerad näringsgren SNI 2007.</b></p>
        <p><i>Enhet:</i> Tusen ton koldioxidekvivalenter</p>
        <table>
            <th>Område</th>
            <th>2008</th>
            <th>2009</th>
            <th>2010</th>
            <th>2011</th>
            <th>2012</th>
            <th>2013</th>
            <th>2014</th>
            <th>2015</th>
            <th>2016</th>
            <th>2017</th>
            {% for i in climate %}
                <tr>
                    <td>{{ i.field }}</td>
                    <td>{{ i.eight }}</td>
                    <td>{{ i.nine }}</td>
                    <td>{{ i.ten }}</td>
                    <td>{{ i.eleven }}</td>
                    <td>{{ i.twelve }}</td>
                    <td>{{ i.thirteen }}</td>
                    <td>{{ i.fourteen}}</td>
                    <td>{{ i.fifteen }}</td>
                    <td>{{ i.sixteen }}</td>
                    <td>{{ i.seventeen }}</td>
                </tr>
            {% endfor %}
        </table>
        <br>
        <p style=\"text-align: right;\">Källa: SCB, Miljöräkenskaper</p>
        <br>
        <br>

        <table style=\"border-spacing: 4px; border-collapse: separate\"> 
        <tr> 
        <td style=\"height: 50px; width: 50px; background-color: mediumseagreen\"> Arbetsmaskiner
        <td style=\"height: 50px; width: 50px; background-color: plum\"> Avfall
        <td style=\"height: 50px; width: 50px; background-color: NavajoWhite\"> El och fjärrvärme
        <td style=\"height: 50px; width: 50px; background-color: OliveDrab\"> Industri
        <td style=\"height: 50px; width: 50px; background-color: SkyBlue\"> Inrikes transporter
        <td style=\"height: 50px; width: 50px; background-color: Tomato\"> Jordbruk
        <td style=\"height: 50px; width: 50px; background-color: Turquoise\"> Lösningsmedel och övrig produktanvänding
        <td style=\"height: 50px; width: 50px; background-color: YellowGreen\"> Uppvärmning av bostäder och lokaler
        </tr> 

        </table> 
        <br>
        <p>Procentuell förändring över tid från 2008 till 2017. Det totala ustäppet har gått från 62567 år 2008 till 52660 år 2017. Det är en procentuell minskning på <font color=”#FF0000″><b>-26%</b></font> inom området.
        Färgschemat ovan bskriver procentuella förändringen för varje område, beskrivande av färg.
        </p>
        <div class=\"pie animate\" style=\"--p:8;--c:mediumseagreen\"> -8%</div>
        <div class=\"pie animate\" style=\"--p:42;--c:plum;--b:10px\"> -42%</div>
        <div class=\"pie animate\" style=\"--p:20;--c:NavajoWhite;--b:15px\"> -20%</div>
        <div class=\"pie animate\" style=\"--p:27;--c:OliveDrab;\"> -27%</div>
        <div class=\"pie animate\" style=\"--p:19;--c:SkyBlue\"> -19%</div>
        <div class=\"pie animate\" style=\"--p:3;--c:Tomato\"> 3%</div>
        <div class=\"pie animate\" style=\"--p:5;--c:Turquoise;--b:10px\"> -5%</div>
        <div class=\"pie animate\" style=\"--p:51;--c:YellowGreen;--b:5px\"> -51%</div>
        <br>
        <p>Om man granskar det visuella diagrammet ovan kan man se en tydlig procentuell minskning inom alla näringsgrenar förutom Jordbruk, där utsläppet har ett genomsnitt på samma värde från 2008.
        Värdet 2017, dessvärre är en ökning från 2008. Vilket beskriver den enda näringgrenen som inte har en minskning av växthusgaser. Enligt data från Naturvårdsverket kan det konstateras att köttproduktion och konsumtion har ökat genon åren. 
        Samt konsumtion av ost. Medan konsumtion av mjölk har minskat med -27%. <a href=\"https://www.naturvardsverket.se/data-och-statistik/\">Läs mer</a>. Medan denna näringsgren inte visar någon tydlig förbättring ser man istället en avsevärd
        procentuell minskning i grenen avfall och uppvärming av bostäder och lokaler som istället visar en minskning på motsvarande -42% och -51%. Industrin har följt med genomsnittliga procentuella förändingen som är beskriven av totalen,
        det vill säga totala -26% där industrin har minskat med -26%. El och fjärrvärme har minskat med -20 procent medan lösningsmedel och övrig produktanvänding samt arbetsmaskiner beskriver mindre förändringar. 
        </p>
        <br>
        <p><b>Utsläpp av växthusgaser per sektor:</b></p>
        <br>
        <p><i>Enhet:</i> Tusen ton koldioxidekvivalenter</p>
        <table>
            <th>Område</th>
            <th>2008</th>
            <th>2009</th>
            <th>2010</th>
            <th>2011</th>
            <th>2012</th>
            <th>2013</th>
            <th>2014</th>
            <th>2015</th>
            <th>2016</th>
            <th>2017</th>
            {% for i in sni %}
                <tr>
                    <td>{{ i.field }}</td>
                    <td>{{ i.eight }}</td>
                    <td>{{ i.nine }}</td>
                    <td>{{ i.ten }}</td>
                    <td>{{ i.eleven }}</td>
                    <td>{{ i.twelve }}</td>
                    <td>{{ i.thirteen }}</td>
                    <td>{{ i.fourteen}}</td>
                    <td>{{ i.fifteen }}</td>
                    <td>{{ i.sixteen }}</td>
                    <td>{{ i.seventeen }}</td>
                </tr>
            {% endfor %}
        </table>
        <br>
        <p style=\"text-align: right;\">Källa: Naturvårdsverket</p>
        <br>
        <br>

        <table style=\"border-spacing: 4px; border-collapse: separate\"> 
        <tr> 
        <td style=\"height: 50px; width: 50px; background-color: darkred\"> Jordbruk, skogsbruk och fiske
        <td style=\"height: 50px; width: 50px; background-color: darkblue\"> Utvinning av miniral
        <td style=\"height: 50px; width: 50px; background-color: purple\"> Tillverkningsindustri
        <td style=\"height: 50px; width: 50px; background-color: orange\"> El, gas och värmeverk samt vatten, avlopp och avfall
        <td style=\"height: 50px; width: 50px; background-color: lightgreen\"> Byggverksamhet
        <td style=\"height: 50px; width: 50px; background-color: coral\"> Transportindustri
        <td style=\"height: 50px; width: 50px; background-color: Chocolate\"> Övriga tjänster
        <td style=\"height: 50px; width: 50px; background-color: DarkGreen\"> Offentlig sektor
        <td style=\"height: 50px; width: 50px; background-color: hotpink\"> Hushåll och ideella föreningar
        </tr> 

        </table> 
        <br>
        <p>Motsvarande procentuell del av totala utsläppet 72,145 (Utsläpp av växthusgaser per bransch) i fallande ordning i tabellen \"Utsläpp av växthusgaser per sektor\" år 2008.</p>
        <div class=\"pie animate\" style=\"--p:13\"> 13%</div>
        <div class=\"pie animate\" style=\"--p:0.5;--c:darkblue;--b:10px\"> 0,1%</div>
        <div class=\"pie animate\" style=\"--p:25;--c:purple;--b:15px\"> 25%</div>
        <div class=\"pie animate\" style=\"--p:14;--c:orange;\"> 14%</div>
        <div class=\"pie animate\" style=\"--p:0.5;--c:lightgreen\"> 0,2%</div>
        <div class=\"pie animate\" style=\"--p:21;--c:coral\"> 21%</div>
        <div class=\"pie animate\" style=\"--p:6;--c:Chocolate;--b:10px\"> 6%</div>
        <div class=\"pie animate\" style=\"--p:1;--c:DarkGreen;--b:5px\"> 1%</div>
        <div class=\"pie animate\" style=\"--p:16;--c:hotpink;\"> 16%</div>

        <br>
        <p>I jämförande mot procentuella delar ovan efter en tio års period, kan procentuell del av utsläppet 63,272 (Utsläpp av växthusgaser per bransch) ses nedan. Värderna är i fallande ordning från tabellen \"Utsläpp av växthusgaser per sektor\" år 2017.</p>
        <p>Färgerna kvarstår för tydligare visuell jämförelse.</p>
        <div class=\"pie animate\" style=\"--p:14\"> 14%</div>
        <div class=\"pie animate\" style=\"--p:2;--c:darkblue;--b:10px\"> 2%</div>
        <div class=\"pie animate\" style=\"--p:23;--c:purple;--b:15px\"> 23%</div>
        <div class=\"pie animate\" style=\"--p:13;--c:orange;\"> 13%</div>
        <div class=\"pie animate\" style=\"--p:3;--c:lightgreen\"> 3%</div>
        <div class=\"pie animate\" style=\"--p:22;--c:coral\"> 22%</div>
        <div class=\"pie animate\" style=\"--p:5;--c:Chocolate;--b:10px\"> 5%</div>
        <div class=\"pie animate\" style=\"--p:1;--c:DarkGreen;--b:5px\"> 1%</div>
        <div class=\"pie animate\" style=\"--p:14;--c:hotpink;\"> 14%</div>

        <p>Genom att först titta på det totala utsläpp av växthusgaser per branch totalt för år 2008 72,145 tusen ton koldioxidekvivalenter medan 2017 hade ett ustläpp på 63,272 tusen ton koldioxidekvivalenter.
        Kan vi se en minskning med 8,873 tusen ton koldioxidekvivalenter. Det är en procentuell minskning med ungefär <font color=”#FF0000″><b>22%</b></font>. Det är en tydlig minskning, med ett snitt på 2,2% per år.
        Genom tabellen och visuelliseringen av procentuella delarna kan man tydligt se att alla brancher har ungefärligt följt med kurvan av minskningen av utsläpp. Jordbruk, skogsbruk och fiske och transportindustrin, 
        byggverksamhet är dem enda brancherna med en procentuell ökning. Dock kan det påpekas att dessa har följt med utvecklingen, annars hade procentuella delen varit tydligt avvikande än det tidigare mätvärdet från 2007.
        Då ala tre brancherna med en procentuell stigning är ungefärligt med tidigare procent, samt genom att granska tabellen \"Utsläpp av växthusgaser per sektor\" syns en mätbar minskning av utsläpp.
        </p>

                <br>
        <p><b>BNP, fasta priser, Referensår 2015:</b></p>
        <br>
        <table>
            <th>Område</th>
            <th>2008</th>
            <th>2009</th>
            <th>2010</th>
            <th>2011</th>
            <th>2012</th>
            <th>2013</th>
            <th>2014</th>
            <th>2015</th>
            <th>2016</th>
            <th>2017</th>
            {% for i in bnp %}
                <tr>
                    <td>{{ i.field }}</td>
                    <td>{{ i.eight }}</td>
                    <td>{{ i.nine }}</td>
                    <td>{{ i.ten }}</td>
                    <td>{{ i.eleven }}</td>
                    <td>{{ i.twelve }}</td>
                    <td>{{ i.thirteen }}</td>
                    <td>{{ i.fourteen}}</td>
                    <td>{{ i.fifteen }}</td>
                    <td>{{ i.sixteen }}</td>
                    <td>{{ i.seventeen }}</td>
                </tr>
            {% endfor %}
        </table>
        
        <br>
        <p style=\"text-align: right;\">Källa: SCB, Nationalräkenskaperna</p>
        <br>
        <br>
        <table style=\"border-spacing: 4px; border-collapse: separate\"> 
        <tr> 
        <td style=\"height: 50px; width: 50px; background-color: mediumseagreen\"> 2008
        <td style=\"height: 50px; width: 50px; background-color: plum\"> 2009
        <td style=\"height: 50px; width: 50px; background-color: NavajoWhite\"> 2010
        <td style=\"height: 50px; width: 50px; background-color: OliveDrab\"> 2011
        <td style=\"height: 50px; width: 50px; background-color: SkyBlue\"> 2012
        <td style=\"height: 50px; width: 50px; background-color: Tomato\"> 2013
        <td style=\"height: 50px; width: 50px; background-color: Turquoise\"> 2014
        <td style=\"height: 50px; width: 50px; background-color: YellowGreen\"> 2015
        <td style=\"height: 50px; width: 50px; background-color: Purple\"> 2016
        <td style=\"height: 50px; width: 50px; background-color: red\"> 2017
        </tr>
        </table>

        <p>
        Med frågan \"Vem släppet ut?\" kan komsumtionsperspektivet svara på frågan \"För vem görs utsläppen?\" beskriver Statistiskamyndigheten, SCB kopplingen mellan BNP och klimatpåverkan. Nedan kan vi se ett visuellt stapeldiagram för presenterar BNP per år i årsperioden 2008 till 2017. Färgen ovan indikerar året i diagrammet nedan.
        </p>

  <div class=\"chart-container\">
    <div class=\"base\"></div>

    <ul class=\"meter\">
      <li><div>4,000,000</div></li>
      <li><div>3,500,000</div></li>
      <li><div>3,000,000</div></li>
      <li><div>2,500,000</div></li>
      <li><div>Mindre än 2,000,000</div></li>
    </ul>
    <!-- Background-Grid -->
    <table>
      <tr>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
      <tr>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
      <tr>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
      <tr>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
      <tr>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
    </table>
    <!-- End Background Grid -->
   
    <div class=\"bar two\"></div>   
    <div class=\"bar three\"></div>
    <div class=\"bar four\"></div>   
    <div class=\"bar five\"></div>   
    <div class=\"bar six\"></div>
    <div class=\"bar seven\"></div>   
    <div class=\"bar eight\"></div> 
    <div class=\"bar nine\"></div> 
    <div class=\"bar ten\"></div> 
    <div class=\"bar eleven\"></div> 
  </div>
    <p>
       Både konsumenten och producenten kan påverka utsläppen och naturresursanvändningen, men detta på olika sätt. Ovan i tidigare diagram har vi skådat producenten i största mån i sektorer och näringgrenar. 
       SCB beskriver,
    </p>
       <br>
        <blockquote cite=\"https://www.scb.se/hitta-statistik/statistik-efter-amne/miljo/miljoekonomi-och-hallbar-utveckling/miljorakenskaper/produktrelaterat/Fordjupad-information/miljorakenskaperna-visar-hur-ekonomin-paverkar-miljo-och-naturresurser/\">
        <i>De branscher som ligger tidigt i förädlingsvärdekedjan, som gruvor, jordbruk, skogsbruk, fiske, raffinaderier och tung industri, har generellt en större energianvändning och miljöpåverkan än de som ligger längre fram i förädlingsvärdeskedjan. Samtidigt är olika ekonomiska aktörer beroende av varandra för leveranser av insatsvaror och utbyten, innovationer och mycket annat. <a href=\"https://www.scb.se/hitta-statistik/statistik-efter-amne/miljo/miljoekonomi-och-hallbar-utveckling/miljorakenskaper/produktrelaterat/Fordjupad-information/miljorakenskaperna-visar-hur-ekonomin-paverkar-miljo-och-naturresurser/\">Läs mer</a>
        </i></blockquote>
        <br>
    <p>
      På så vis är det vi tidigare granskat en viktig del i klimatfrågan. Näringsgrenar och sektorer har stor påverkan. Genom energi förbrukning kan klimatpåverkan räknas. Dock har olika energislag olika miljöpåverkan. 
      Produktion coh konsumtion beskriver ramen av landets ekonomi. Genom att granska BPN kan eventuella kopplingar mellan exemoelvis ekenomisk tillväxt och miljöpåverkan granskas. Efterfrågan, produktion och leverans har en stark koppling till både den ekenomiska faktoren, branchbundna faktoren och den privata faktoren. Individens påverkan och näringsgrenens påverkan. Genom en modell som det internationella organisationen för ekonomisk samarbete och utveckling (OECD) och Europeiska miljöbyrån har utvecklat en modell som beskriver just detta samband, hur ett eller flera miljöområden påverkas av hur samhället eller ekonomin ser ut. 
      Denna modell kallas för DPSIR och står för drivkrafter, påverkan, status, inverkan och respons. Genom denna modell har det konstaterats att den ekonomiska bilden i varje nation påverkar den miljömässiga aspekten. Denna metod används i uppföljningen av Agenda 2030. SCB utvecklar detta,
    </p>
       <br>
        <blockquote cite=\"https://www.scb.se/hitta-statistik/statistik-efter-amne/miljo/miljoekonomi-och-hallbar-utveckling/miljorakenskaper/produktrelaterat/Fordjupad-information/miljorakenskaperna-visar-hur-ekonomin-paverkar-miljo-och-naturresurser/\">
        <i>Alltmer jämförbar statistik produceras om kopplingen mellan miljö och ekonomi. Statistiken kan ligga till grund för till exempel klimatpolitiska beslut. Där behövs fakta och underlag som visar vilka ekonomiska styrmedel som fungerar. Besluten kan sedan få effekt på utsläppen av växthusgaser och minska den negativa påverkan på miljön. <a href=\"https://www.scb.se/hitta-statistik/statistik-efter-amne/miljo/miljoekonomi-och-hallbar-utveckling/miljorakenskaper/produktrelaterat/Fordjupad-information/miljorakenskaperna-visar-hur-ekonomin-paverkar-miljo-och-naturresurser/\">Läs mer</a>
        </i></blockquote>
        <br>
    <p>
    Vi kan genom datan vi granskat för mål 13 konstatera följande; sektorer, näringgrenar och ekonomsika faktorer har en påverkan på mijön genom utsläpp, resursförbrukning och energiförbrukning. Genom mål 13, där målet är att minska just dessa faktorer har en föränding börjat att ske genom mätbara värden av utsläpp av koldioxidekvivalenter. Målet är under arbete och fler förändringar kommer förhoppningsvis att ske inom framtiden genom att granska data. Utvecklingskurvan har idag en positiv trend. Så vi hoppas att framtiden har en av samma slag.
    </p>
    <br>
    <h3>Källförteckning</h3>
    <p><br>
    <b>Webbkällor</b>
    <br><br>
    13 bekämpa klimat förändringarna. (2021, december 27). UNDP. https://www.globalamalen.se/om-globala-malen/mal-13-bekampa-klimatforandringarna/ (Hämtad 2022-05-12).
    <br><br>
    Global uppvärmning. (2022, april 4). Wikipedia. https://sv.wikipedia.org/wiki/Global_uppv%C3%A4rmning (Hämtad 2022-05-12).
    <br><br>
    Indikatorer för hållbar utveckling. Statistiskmyndigheten, SCB. https://www.scb.se/hitta-statistik/statistik-efter-amne/miljo/miljoekonomi-och-hallbar-utveckling/indikatorer-for-hallbar-utveckling/ (Hämtad 2022-05-13).
    <br><br>
    Klimatförändringarna. WWF. https://www.wwf.se/klimat/klimatforandringar/ (Hämtad 2022-05-13).
    <br><br>
    Miljöräkenskaperna visar hur ekonomin påverkar miljö och naturresurser. Statistiskmyndigheten, SCB. https://www.scb.se/hitta-statistik/statistik-efter-amne/miljo/miljoekonomi-och-hallbar-utveckling/miljorakenskaper/produktrelaterat/Fordjupad-information/miljorakenskaperna-visar-hur-ekonomin-paverkar-miljo-och-naturresurser/ (Hämtad 2022-05-14).
    <br><br>
    Svensk konsumtion och produktion av mjölk och ost. Naturvårdsverket. https://sv.wikipedia.org/wiki/Global_uppv%C3%A4rmning (Hämtad 2022-05-14).
    <br><br>
    Svensk konsumtion och produktion av kött. Naturvårdsverket. https://sv.wikipedia.org/wiki/Global_uppv%C3%A4rmning (Hämtad 2022-05-14).
    </p>
  </div>
    
</body>

{% include 'footer.html.twig' %}
", "project/home.html.twig", "C:\\Users\\annab\\dbwebb-kurser\\mvc\\me\\report\\templates\\project\\home.html.twig");
    }
}
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:1:{s:48:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57";O:35:"phpDocumentor\Reflection\Php\Class_":13:{s:42:" phpDocumentor\Reflection\Php\Class_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:48:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57";s:36:" phpDocumentor\Reflection\Fqsen name";s:47:"__TwigTemplate_c3aac6362208b28a74507b49f50c7b57";}s:45:" phpDocumentor\Reflection\Php\Class_ docBlock";N;s:45:" phpDocumentor\Reflection\Php\Class_ abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Class_ final";b:0;s:43:" phpDocumentor\Reflection\Php\Class_ parent";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:14:"\Twig\Template";s:36:" phpDocumentor\Reflection\Fqsen name";s:8:"Template";}s:47:" phpDocumentor\Reflection\Php\Class_ implements";a:0:{}s:46:" phpDocumentor\Reflection\Php\Class_ constants";a:0:{}s:47:" phpDocumentor\Reflection\Php\Class_ properties";a:2:{s:57:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::$source";O:37:"phpDocumentor\Reflection\Php\Property":11:{s:44:" phpDocumentor\Reflection\Php\Property fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:57:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::$source";s:36:" phpDocumentor\Reflection\Fqsen name";s:6:"source";}s:47:" phpDocumentor\Reflection\Php\Property docBlock";N;s:44:" phpDocumentor\Reflection\Php\Property types";a:0:{}s:46:" phpDocumentor\Reflection\Php\Property default";N;s:45:" phpDocumentor\Reflection\Php\Property static";b:0;s:49:" phpDocumentor\Reflection\Php\Property visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:47:" phpDocumentor\Reflection\Php\Property location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:18;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\Php\Property endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:18;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:43:" phpDocumentor\Reflection\Php\Property type";N;s:47:" phpDocumentor\Reflection\Php\Property readOnly";b:0;s:47:" phpDocumentor\Reflection\Php\Property metadata";a:0:{}}s:57:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::$macros";O:37:"phpDocumentor\Reflection\Php\Property":11:{s:44:" phpDocumentor\Reflection\Php\Property fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:57:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::$macros";s:36:" phpDocumentor\Reflection\Fqsen name";s:6:"macros";}s:47:" phpDocumentor\Reflection\Php\Property docBlock";N;s:44:" phpDocumentor\Reflection\Php\Property types";a:0:{}s:46:" phpDocumentor\Reflection\Php\Property default";s:2:"[]";s:45:" phpDocumentor\Reflection\Php\Property static";b:0;s:49:" phpDocumentor\Reflection\Php\Property visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:47:" phpDocumentor\Reflection\Php\Property location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:19;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\Php\Property endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:19;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:43:" phpDocumentor\Reflection\Php\Property type";N;s:47:" phpDocumentor\Reflection\Php\Property readOnly";b:0;s:47:" phpDocumentor\Reflection\Php\Property metadata";a:0:{}}}s:44:" phpDocumentor\Reflection\Php\Class_ methods";a:6:{s:63:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::__construct()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:63:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::__construct()";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"__construct";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:3:"env";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Twig\Environment";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"Environment";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:21;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:31;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:61:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::doDisplay()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:61:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::doDisplay()";s:36:" phpDocumentor\Reflection\Fqsen name";s:9:"doDisplay";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:9:"protected";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:2:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"blocks";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:46:" phpDocumentor\Reflection\Php\Argument default";s:2:"[]";s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:33;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:597;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:67:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::getTemplateName()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:67:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::getTemplateName()";s:36:" phpDocumentor\Reflection\Fqsen name";s:15:"getTemplateName";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:599;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:602;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:63:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::isTraitable()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:63:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::isTraitable()";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"isTraitable";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:604;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:607;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:64:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::getDebugInfo()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:64:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::getDebugInfo()";s:36:" phpDocumentor\Reflection\Fqsen name";s:12:"getDebugInfo";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:609;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:612;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:68:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::getSourceContext()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:68:"\__TwigTemplate_c3aac6362208b28a74507b49f50c7b57::getSourceContext()";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"getSourceContext";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:614;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1017;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}}s:47:" phpDocumentor\Reflection\Php\Class_ usedTraits";a:0:{}s:45:" phpDocumentor\Reflection\Php\Class_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:16;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Class_ endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1018;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:45:" phpDocumentor\Reflection\Php\Class_ metadata";a:0:{}}}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";