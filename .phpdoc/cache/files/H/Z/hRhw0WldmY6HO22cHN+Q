1684608841
waR3U4bTeM%3Aaa73b73f3ea49871f8b20cefe05115bf-285cd6f12ec2d8eedef4ad48a46dab91
s:9856:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjI4NWNkNmYxMmVjMmQ4ZWVkZWY0YWQ0OGE0NmRhYjkxIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTM6InJlbGF0aW9ucy5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czo4MToidG9vbHMvcGhwbWV0cmljcy92ZW5kb3IvcGhwbWV0cmljcy9waHBtZXRyaWNzL3RlbXBsYXRlcy9odG1sX3JlcG9ydC9yZWxhdGlvbnMucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czo2NDMwOiI8P3BocCByZXF1aXJlIF9fRElSX18gLiAnL19oZWFkZXIucGhwJzsgPz4KCjw/cGhwCiRyZWxhdGlvbnMgPSBbXTsKJGNsYXNzZXNDcCA9IFtdOwpmb3JlYWNoICgkY2xhc3NlcyBhcyAkY2xhc3MpIHsKCiAgICAkY2xhc3NbJ25hbWUnXSA9ICdcXCcgLiAkY2xhc3NbJ25hbWUnXTsKICAgICRjbGFzc2VzQ3BbJGNsYXNzWyduYW1lJ11dID0gJGNsYXNzOwogICAgJGNsYXNzZXNDcFskY2xhc3NbJ25hbWUnXV1bJ2V4dGVybmFscyddID0gW107CgoKICAgIGZvcmVhY2ggKCRjbGFzc1snZXh0ZXJuYWxzJ10gYXMgJiRleHQpIHsKICAgICAgICAkZXh0ID0gJ1xcJyAuICRleHQ7CiAgICAgICAgaWYgKCFpc3NldCgkY2xhc3Nlc1skZXh0XSkpIHsKICAgICAgICAgICAgJGNsYXNzZXNDcFskZXh0XSA9IFsKICAgICAgICAgICAgICAgICduYW1lJyA9PiAkZXh0LAogICAgICAgICAgICAgICAgJ2V4dGVybmFscycgPT4gW10sCiAgICAgICAgICAgIF07CiAgICAgICAgfQogICAgICAgICRjbGFzc2VzQ3BbJGNsYXNzWyduYW1lJ11dWydleHRlcm5hbHMnXVtdID0gJGV4dDsKICAgIH0KfQpmb3JlYWNoICgkY2xhc3Nlc0NwIGFzICRjbGFzcykgewogICAgYXJyYXlfcHVzaCgkcmVsYXRpb25zLCAob2JqZWN0KVsKICAgICAgICAnbmFtZScgPT4gJGNsYXNzWyduYW1lJ10sCiAgICAgICAgJ3NpemUnID0+IDMwMDAsCiAgICAgICAgJ3JlbGF0aW9ucycgPT4gKGFycmF5KWFycmF5X3ZhbHVlcyhhcnJheV91bmlxdWUoJGNsYXNzWydleHRlcm5hbHMnXSkpLAogICAgXSk7Cn0KPz4KCgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sdW1uIj4KICAgICAgICA8ZGl2IGNsYXNzPSJibG9jIj4KICAgICAgICAgICAgPGg0Pk9iamVjdCByZWxhdGlvbnM8L2g0PgogICAgICAgICAgICA8ZGl2IGlkPSJjaGFydC1yZWxhdGlvbnMiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKPD9waHAgcmVxdWlyZSBfX0RJUl9fIC4gJy9fZm9vdGVyLnBocCc7ID8+CgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoKCiAgICB2YXIgcmVsYXRpb25zID0gPD9waHAgZWNobyBqc29uX2VuY29kZSgkcmVsYXRpb25zLCBKU09OX1BSRVRUWV9QUklOVCk7ID8+OwoKICAgIC8qKgogICAgICogVGhhbmtzIHRvIGh0dHA6Ly9ibC5vY2tzLm9yZy9tYm9zdG9jay9yYXcvNzYwNzk5OS8KICAgICAqLwogICAgZnVuY3Rpb24gdXBkYXRlUmVsYXRpb25zQ2hhcnQoKSB7CgoKICAgICAgICB2YXIgZGlhbWV0ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhcnQtcmVsYXRpb25zJykub2Zmc2V0V2lkdGgsCiAgICAgICAgICAgIHJhZGl1cyA9IGRpYW1ldGVyIC8gMiwKICAgICAgICAgICAgaW5uZXJSYWRpdXMgPSByYWRpdXMgLSAxMjA7CgogICAgICAgIHZhciBjbHVzdGVyID0gZDMubGF5b3V0LmNsdXN0ZXIoKQogICAgICAgICAgICAuc2l6ZShbMzYwLCBpbm5lclJhZGl1c10pCiAgICAgICAgICAgIC5zb3J0KG51bGwpCiAgICAgICAgICAgIC52YWx1ZShmdW5jdGlvbiAoZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGQuc2l6ZTsKICAgICAgICAgICAgfSk7CgogICAgICAgIHZhciBidW5kbGUgPSBkMy5sYXlvdXQuYnVuZGxlKCk7CgogICAgICAgIHZhciBsaW5lID0gZDMuc3ZnLmxpbmUucmFkaWFsKCkKICAgICAgICAgICAgLmludGVycG9sYXRlKCJidW5kbGUiKQogICAgICAgICAgICAudGVuc2lvbiguODUpCiAgICAgICAgICAgIC5yYWRpdXMoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBkLnk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5hbmdsZShmdW5jdGlvbiAoZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGQueCAvIDE4MCAqIE1hdGguUEk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICB2YXIgc3ZnID0gZDMuc2VsZWN0KCIjY2hhcnQtcmVsYXRpb25zIikuYXBwZW5kKCJzdmciKQogICAgICAgICAgICAuYXR0cigid2lkdGgiLCBkaWFtZXRlcikKICAgICAgICAgICAgLmF0dHIoImhlaWdodCIsIGRpYW1ldGVyKQogICAgICAgICAgICAuYXBwZW5kKCJnIikKICAgICAgICAgICAgLmF0dHIoInRyYW5zZm9ybSIsICJ0cmFuc2xhdGUoIiArIHJhZGl1cyArICIsIiArIHJhZGl1cyArICIpIik7CgogICAgICAgIHZhciBsaW5rID0gc3ZnLmFwcGVuZCgiZyIpLnNlbGVjdEFsbCgiLmxpbmsiKSwKICAgICAgICAgICAgbm9kZSA9IHN2Zy5hcHBlbmQoImciKS5zZWxlY3RBbGwoIi5ub2RlIik7CgoKICAgICAgICB2YXIgbm9kZXMgPSBjbHVzdGVyLm5vZGVzKHBhY2thZ2VIaWVyYXJjaHkocmVsYXRpb25zKSksCiAgICAgICAgICAgIGxpbmtzID0gcGFja2FnZUltcG9ydHMobm9kZXMpOwogICAgICAgIGxpbmsgPSBsaW5rCiAgICAgICAgICAgIC5kYXRhKGJ1bmRsZShsaW5rcykpCiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZCgicGF0aCIpCiAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgICAgICBkLnNvdXJjZSA9IGRbMF0sIGQudGFyZ2V0ID0gZFtkLmxlbmd0aCAtIDFdOwogICAgICAgICAgICB9KQogICAgICAgICAgICAuYXR0cigiY2xhc3MiLCAibGluayIpCiAgICAgICAgICAgIC5hdHRyKCJkIiwgbGluZSk7CgogICAgICAgIG5vZGUgPSBub2RlCiAgICAgICAgICAgIC5kYXRhKG5vZGVzLmZpbHRlcihmdW5jdGlvbiAobikgewogICAgICAgICAgICAgICAgcmV0dXJuICFuLmNoaWxkcmVuOwogICAgICAgICAgICB9KSkKICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKCJ0ZXh0IikKICAgICAgICAgICAgLmF0dHIoImNsYXNzIiwgIm5vZGUiKQogICAgICAgICAgICAuYXR0cigiZHkiLCAiLjMxZW0iKQogICAgICAgICAgICAuYXR0cigidHJhbnNmb3JtIiwgZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgICAgIHJldHVybiAicm90YXRlKCIgKyAoZC54IC0gOTApICsgIil0cmFuc2xhdGUoIiArIChkLnkgKyA4KSArICIsMCkiICsgKGQueCA8IDE4MCA/ICIiIDogInJvdGF0ZSgxODApIik7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5zdHlsZSgidGV4dC1hbmNob3IiLCBmdW5jdGlvbiAoZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGQueCA8IDE4MCA/ICJzdGFydCIgOiAiZW5kIjsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBkLmtleTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLm9uKCJtb3VzZW92ZXIiLCBtb3VzZW92ZXJlZCkKICAgICAgICAgICAgLm9uKCJtb3VzZW91dCIsIG1vdXNlb3V0ZWQpOwoKCi8vICAgICAgICBkMy5kYXRhKHJlbGF0aW9ucyk7CgogICAgICAgIGZ1bmN0aW9uIG1vdXNlb3ZlcmVkKGQpIHsKICAgICAgICAgICAgbm9kZQogICAgICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24gKG4pIHsKICAgICAgICAgICAgICAgICAgICBuLnRhcmdldCA9IG4uc291cmNlID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGxpbmsKICAgICAgICAgICAgICAgIC5jbGFzc2VkKCJsaW5rLS10YXJnZXQiLCBmdW5jdGlvbiAobCkgewogICAgICAgICAgICAgICAgICAgIGlmIChsLnRhcmdldCA9PT0gZCkgcmV0dXJuIGwuc291cmNlLnNvdXJjZSA9IHRydWU7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmNsYXNzZWQoImxpbmstLXNvdXJjZSIsIGZ1bmN0aW9uIChsKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGwuc291cmNlID09PSBkKSByZXR1cm4gbC50YXJnZXQudGFyZ2V0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChsKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGwudGFyZ2V0ID09PSBkIHx8IGwuc291cmNlID09PSBkOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIG5vZGUKICAgICAgICAgICAgICAgIC5jbGFzc2VkKCJub2RlLS10YXJnZXQiLCBmdW5jdGlvbiAobikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnRhcmdldDsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuY2xhc3NlZCgibm9kZS0tc291cmNlIiwgZnVuY3Rpb24gKG4pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5zb3VyY2U7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG1vdXNlb3V0ZWQoZCkgewogICAgICAgICAgICBsaW5rCiAgICAgICAgICAgICAgICAuY2xhc3NlZCgibGluay0tdGFyZ2V0IiwgZmFsc2UpCiAgICAgICAgICAgICAgICAuY2xhc3NlZCgibGluay0tc291cmNlIiwgZmFsc2UpOwoKICAgICAgICAgICAgbm9kZQogICAgICAgICAgICAgICAgLmNsYXNzZWQoIm5vZGUtLXRhcmdldCIsIGZhbHNlKQogICAgICAgICAgICAgICAgLmNsYXNzZWQoIm5vZGUtLXNvdXJjZSIsIGZhbHNlKTsKICAgICAgICB9CgogICAgICAgIGQzLnNlbGVjdChzZWxmLmZyYW1lRWxlbWVudCkuc3R5bGUoImhlaWdodCIsIGRpYW1ldGVyICsgInB4Iik7CgogICAgICAgIC8vIExhemlseSBjb25zdHJ1Y3QgdGhlIHBhY2thZ2UgaGllcmFyY2h5IGZyb20gY2xhc3MgbmFtZXMuCiAgICAgICAgZnVuY3Rpb24gcGFja2FnZUhpZXJhcmNoeShjbGFzc2VzKSB7CiAgICAgICAgICAgIHZhciBtYXAgPSB7fTsKCiAgICAgICAgICAgIGZ1bmN0aW9uIGZpbmQobmFtZSwgZGF0YSkgewogICAgICAgICAgICAgICAgbmFtZSA9IChkYXRhID8gbmFtZSArICcgJyA6IG5hbWUpOwogICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBtYXBbbmFtZV0sIGk7CiAgICAgICAgICAgICAgICBpZiAoIW5vZGUpIHsKICAgICAgICAgICAgICAgICAgICBub2RlID0gbWFwW25hbWVdID0gZGF0YSB8fCB7bmFtZTogbmFtZSwgY2hpbGRyZW46IFtdfTsKICAgICAgICAgICAgICAgICAgICBpZiAobmFtZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnQgPSBmaW5kKG5hbWUuc3Vic3RyaW5nKDAsIGkgPSBuYW1lLmxhc3RJbmRleE9mKCJcXCIpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbm9kZS5wYXJlbnQuY2hpbGRyZW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50LmNoaWxkcmVuID0gW107IC8vIGZpeCBhbm9tYWxpZXMKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudC5jaGlsZHJlbi5wdXNoKG5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICBub2RlLmtleSA9IG5hbWU7Ly9uYW1lLnN1YnN0cmluZyhpICsgMSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoZCkgewogICAgICAgICAgICAgICAgZmluZChkLm5hbWUsIGQpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHJldHVybiBtYXBbIiJdOwogICAgICAgIH0KCiAgICAgICAgLy8gUmV0dXJuIGEgbGlzdCBvZiBpbXBvcnRzIGZvciB0aGUgZ2l2ZW4gYXJyYXkgb2Ygbm9kZXMuCiAgICAgICAgZnVuY3Rpb24gcGFja2FnZUltcG9ydHMobm9kZXMpIHsKICAgICAgICAgICAgdmFyIG1hcCA9IHt9LAogICAgICAgICAgICAgICAgaW1wb3J0cyA9IFtdOwoKICAgICAgICAgICAgLy8gQ29tcHV0ZSBhIG1hcCBmcm9tIG5hbWUgdG8gbm9kZS4KICAgICAgICAgICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoZCkgewogICAgICAgICAgICAgICAgbWFwW2QubmFtZV0gPSBkOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIEZvciBlYWNoIGltcG9ydCwgY29uc3RydWN0IGEgbGluayBmcm9tIHRoZSBzb3VyY2UgdG8gdGFyZ2V0IG5vZGUuCiAgICAgICAgICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgICAgIGlmIChkLnJlbGF0aW9ucykgZC5yZWxhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaSkgewogICAgICAgICAgICAgICAgICAgIGltcG9ydHMucHVzaCh7c291cmNlOiBtYXBbZC5uYW1lXSwgdGFyZ2V0OiBtYXBbaV19KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHJldHVybiBpbXBvcnRzOwogICAgICAgIH0KCgogICAgfQoKICAgIGRvY3VtZW50Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykgewogICAgICAgICAgICB1cGRhdGVSZWxhdGlvbnNDaGFydCgpOwogICAgICAgIH0KICAgIH07Cgo8L3NjcmlwdD4KIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";