{% include '/project/main.html.twig' %}

<body>

    <div class="content">
        <h2>Om projektet</h2>
        <br>
        <p>
        <div class="btn-group">
            <a class="button" href="{{ path("reset") }}">Reset databasens innehåll</a>
        </div>
        <h4><b>Länkar:</b></h4>
        <br>
        <ul>
            <li>
                <a href="https://www.student.bth.se/~anbj21/dbwebb-kurser/mvc/me/report/docs/api/">PHPDOCS</a>
            </li>
            <li>
                <a href="https://www.student.bth.se/~anbj21/dbwebb-kurser/mvc/me/report/docs/metrics/">PHPMETRICS</a>
            </li>
            <li>
                <a href="https://github.com/annabeerg/mvc_report.git">Mitt GITHUB repo</a>
            </li>
            <li>
                <a href="https://scrutinizer-ci.com/g/annabeerg/mvc_report/">Scrutinizer</a>
            </li>
            <li>
                <a href="https://www.student.bth.se/~anbj21/dbwebb-kurser/mvc/me/report/docs/coverage/coverage/">Här kan du se kodtäckning, pga fel i scruitinizer och phpmetrics</a>
            </li>
        </ul>
        <br>
        <br>
        <p>
        Mitt projekt handlar om klimatfråga 13 i FN:s universiella klimatmål som ska uppfyllas innan år 2030. På så vis blir detta projekts fokus "Visualisera indikatorer för hållbarhet (sustainability)".
        Klimatmål 13 handlar om att bekämpa klimatförändringen, genom data se hur situationen ser ut i dagsläget. Genom att läsa data kan man se trender och i vilken riktning situationen rör sig emot.
        Genom att skapa en databas och samla data i fyra tabeller som handlar om området, data kring mål 13. Överlag hur temperatur är påverkad av ustläpp. Läsa mängd data som sektorer och näringsgrenar 
        släpper ut per år, under en tidsperiod, år för år. Total mängd växthusgaser som släpps ut inom grenarna. Genom att sedan försöka visualisera datan genom procent och visualisering av procentmängd och stapeldiagram
        försöka underläta för läsaren hur datan ser ut. Ibland kan det vara svårt att tolka ren data, på så vis kan ett försök till visualisering underlätta. 
        <br>
        <br>
        Jag har strukturerat mitt projekt genom att som nämnt innan samla data och föra data i databasen i fyra tabeller genom data från csv filer. Tabellerna är BNP, ClimateSNI, ClimateChange och Temperature. Arbetet mot databsen sker genom
        ORM och Doctrine. Genom Entity och Repository klasser, styrda från Controller klassen Project. Routen "/proj" tillhör klassen allclimate som genom tillhörande repository klass till tillhörande tabell genom metoden findAll() returnerar
        en array med data från tabellen som sedan presenteras i dem visuella tabellerna i home.html.twig. För att återställa databsens innehåll används routen "/proj/reset" tillhörande metod reset som använder två andra klasser: resetter och adddata.
        metoden resetter raderar data genom att hitta all data genom repository metoden findAll och sedan använda entityManagers metod remove(varje entity tillhörande tabellen per klass) genom en foreach loop som raderar alla entitys.
        Sedan används entityManager metoden flush för att spara alla ändringar sparade i entityManagern. metoden adddata gör resetters motsats, genom att läsa filerna med file() som läser filens innehåll till en array. Sedan för varje rad i arrayen
        från csv filen använvänds den andra inbyggda metoden str_getcsv så att varje strängen från csv filen till ännu en array med korrekt data i strängformat med varje cell som en sträng från strängen. På så vis skapas en array för varje rad, och läggs
        läggs till i en stor array. För att sedan använda denna data ittereras arrayen i en for loop som skickar varje array i arrayen för att kalla på flera mindre metoder i klassen Data; sektor, bnp, sni och temp som sätter värden till varje nyskapad entity. Objekt från varje entity returneras
        och sparas med entityManager metoden flush för att läggas till i vardera tabell i databasen. På så vis resettas databasens tabeller med ursprungliga datan från csv filerna.
        Den största svårigheten var att lösa problemet med att kunna resetta databsens tabellers innehåll. Genom denna svårighet uppstod problemet att radera all data samt att kunna lägga till data från csv filer. 
        Genom att läsa på om doctrine kunde jag lösa problem ett och sedan lösa problem två. Försökte använda league/csv, vilket jag inte fick att fungera. Den kunde inte hitta filen för att läsa datan. Men genom att använda dem inbyggda metoderna file() och str_getcsv
        kunde problemet lösas relativt smidigt. Men svårigheten var att det tog tid att lösa. I övrigt tyckte jad att projektet hade en lagom svårighet passande kursen. 
        <br>
        <br>
        Utseendet på hemsidan skiljer från report sidan genom ändrat färgtema, ändring av style på headern med border samt ändrad färg i navbaren samt ändrad typografi på hela webbplatsen vilket gör att sidorna skiljer sig utseendemässigt. Denna stylesheet finns i publica mappen css och 
        heter project.css. Hemsidan är lättnavigerad och enkel att förstå strukturen på hemsidan. Poängtering har lagt på att försöka porträttera data genom tabeller, diagram och visuella prorträttering av procent för att underlätta förståelsen av data för användaren.
        <br>
        <br>
        Rättning av kod går phpcs genom utan anmärkning. Både phpmd och phpstan har anmärkningar. Majoriteten av anmärkningarna är från repository och entoty klasserna, vilket jag inte har rättat efter instruktioner från Miakel från discord. 
        Det finns några övriga anmärkningar som jag inte kan rätta på grund av att jag inte funnit någon lösning till problemen. Jag har kommenterat i koden på dem ställen problemen finns. Ett exempel på ett sådant problem var 
        itteration av csv filer när den har blicit läst av file(). En foreach loop fungerade men både phpstan och phpmd ger anmärkning på detta. Har försökt hitta någon annan lösning utan lycka. Försökte använda league/csv för att lösa läsning av
        csv filerna men fick det inte att fungera. Därav fann jag lösningen att läsa filerna med file() och sedan skapa arrays genom at itterera igenom datan och göra dem till strängar i arrays. Det finns även några fel från tidigare kursmoment som, jag inte heller funnit någon lösning på.
        <br>
        <br>
        Ett annat problem som jag hade var att få data på kodtäckning av min kod. Det fungerar inte i phpmetrics då composer phpunit inte fungerar, samt så läser inte Scrutinizer alla testfiler vilket skapar fel statistik. Scrutinizer läser endast 5 tester och 5 assertions, medan det finns 
        40 tester och 49 assertions. Det fungerar att läsa kostäckning genom den data kommandot "XDEBUG_MODE=coverage vendor/bin/phpunit", som man kan läsa här <a href="https://www.student.bth.se/~anbj21/dbwebb-kurser/mvc/me/report/docs/coverage/coverage/">KODTÄCKNING</a>. Jag har kopierat datan som är 
        genererad i build mappen och placerat den i docs mappen, för att kunna visa kodtäcknigen. Projektets kodtäckning syns korrekt i scrutinizer medan kodtäckning för övriga klasser är felaktiga. Koden har en kodtäckning på 79.31% i dem klasser som är från tidigare kursmoment medan projektet har en kodtäckning på 100%. DocBlock har använts för att dokumentera metoder och klasser och dokumentation finns
        i listan av länkar ovan.
        <br>
        Jag använda mig främst av phpmetrics för att läsa om min kodkvalitet. När jad hade gjort klart koden för projektet och genrerat data från Scrutinizer och phpmetrics insåg jag att filen jag för stor och metoderna för komplicerade. Projektet i controllern hade en cyclomatic complexity på 18. Jag valde 
        därför att dela upp reset och adddata till två metoder istället för en och sedan skapa flera mindre metoder för att hantera klasserna i entity. Genom klassen Data där dem mindre klasserna som skapar och sätter data i entity objektet, samt dela upp en komplex metod till två mindre som 
        i sin tur hanterar flertalet mindre kunde cyclomatic complexity minska till 12. Klassen Projekt i controllern har ändå utöver ändringarna för att minska filen en volym av 1658.54, vilket är min näst största klass. Efter tidigare kursmoment, försökte jag göra ett aktivt val att göra fler mindre metoder, 
        vilket jag tyckte blev bra genom att det även förbättrade min kodkvalitet överlag. Genom att kunna granska data i Scrutinizer och phpmetrics får man en större förståelse av att försöka strukturera, effiktivisera och minimera. Hellre fler mindre metoder än få stora.
        <br>
        <br>
        Jag tycker att denna kurs har varit otroligt lärorik, ganska svår men vänligt rolig. Det har varit passande hastighet på tempot samt passande kursmaterial. Kul att utvecklas mer inom php som är ett språk som man hanterade när jag var nybörjare i detta program.
        Jag är väldigt nöjd med denna kurs. Skulle absolut ge kursen 10/10 och kunna rekommendera den till andra.
        </p>
  </div>

</body>

{% include 'footer.html.twig' %}
