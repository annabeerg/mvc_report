{% include 'main.html.twig' %}

<body>

    <div class="content">
        <h2>Rapport</h2>

        <h3>Kmom01</h3>
        <p> {{ kmom1 }} </p>

        <h3>Kmom02</h3>
        <p> {{ kmom2 }} </p>

        <h3>Kmom03</h3>
        <p> {{ kmom3 }} </p>

        <h3>Kmom04</h3>
        <p> Jag tyckte att det var roligt att skreva phpunit tester. Själva testningen påminner om
            enhetsterstesterna 
            i python. Roligt och alltid lärorikt att jobba med. Det är ett bra sätt att se på sin kod från en 
            annan vinkel än 
            när man skriver den för funktionlitetens skull. Man kan gott och väl upptäcka onödiga omvägar och få en
            renare kod genom att endast se på koden från ett annat håll. Tyvärr fungerar inte composer phpunit
            för mig som jag pratat om i
            discord med Marie och Mikael därav har jag fått lov att använda: XDEBUG_MODE=coverage bin/phpunit 
            --coverage-text
            test/Game21 och specificera filen som ska testat för det fungerade ej för mig att testa hela mappen.
            Men överlag i alla
            ternerna ligger jag på snitt 80-90 procent kodtäckning. Någon på mindre. Det var roligt att förstå hur
            kodtäckningen fungerar, att den berättar kodtäckning på antal rader som är "lästa", vilka rader som 
            testet har gått igenom.
            Jag upplever att alla metoder i min kod inte är testbara. Genom att vissa endast sätter variablar eller 
            appendar arrays och vi inte gått igenom mockning så kändes dem svåra. Men genom att jag ofta skrev metoder 
            som "går igenom" dem
            metoderna och sedan returnerar ett värde så kan en metod täcka flera metoder. Vilket är synd för man vill 
            ändå testa specifika metoder som inte har en return. Kan tycker att testbar kod absolut är snyggare kod! 
            Mitt TIL för denna
            vecka är att bli bättre på att kontinuerligt dokumentera. Det behöver jag verkligen bli bättre på.  </p>

        <h3>Kmom05</h3>
        <p> Jag tyckte att det gick väldigt bra att jobba igenom veckans övning. Lite klurigt att komma 
            igång eftersom jag missade tisdagens föreläsning och sen när det inte gick att se den i efterhand. 
            Tor att det hade underlättat 
            mycket att komma igång med övningen och uppgiften. Det var ingenting speciellt jag reagerade på under 
            övningen, tyckte att allt flöt på när jag började komma igång.
            Jag tänkte på strukturen vi arbetade med i databaskursen genom get och post med formulär och tabeller. 
            Erfarenheten från den kursen underlättade något enormt till denna vecka. 
            Jag satte mig ner med papper och penna och gjorde 
            en plan för min struktur och höll mig till den strukturen, vilket fungerade bra. 
            Det enda jag tänkte på vid användargränssnitt var designen att strukturera datan tydligt.
            Denna vecka gjorde jag inga extrauppgifter.
            Jag gillade ORM. Det var en tydlig koppling mellan att jobba med klasser med 
            information som är i databaser. Objekt kunde enkelt skapas, 
            sättas och fås genom att slå ihop dem delarna.
            Mitt TIL för denna vecka är att påminna mig själv att planering är A och O. </p>

        <h3>Kmom06</h3>
        <p> Jag gillar phpmetrics. Det var det verktyget jag gillade mest i detta kursmoment. Det var ett lättarbetat verktyg och datan kunde hittas enkelt och tydligt. Det jag hade önskat fanns som det fanns på Scrutinizer var när man hovrade över förkortningarna till datan så kom en kort förklaring till var datan betydde, eller förkortningen betydde. Vilket underlättade förståelsen. Genom att cohesion, coverage  och coupling inte kunde ses i Scrutinizer för mig så kunde jag inte arbeta med just den datan i min analys. Jag fick till bagdet, vilket var ett smidigt komplement till github repot där verktyget överblick kunde visas. Min första känsla av Scrutinizer var förvirring. Jag tyckte att verktyget var lite svårnavigerat och krångligt att förstå hur och var man hittade datan. Jag letade länge efter både cohesion och coupling innan jag insåg att Mikael hade nämnt på föreläsningen att han inte heller kunde se det av någon underlig anledning i ett av hans repon. Min kodkvaliteten låg på 6.14 både innan och efter första bygget och förbättringen. Tyvärr kunde jag inte se kodtäckningen i varken phpmetrics eller Scrutinizer. 

Jag tycker att min kodkvalitet blev låg för game 21 uppgiften. Dock om tid fanns skulle jag nog göra om hela uppgiftens klasser och strukturera dem på ett annorlunda sätt för att minimera risken till en sådan stor och problematisk fil som Game klassen i controllern. Den blev alldeles för stor, och är fortfarande för stor samt för komplex. Men jag kan tänka mig att denna uppgift vill ge inblick i detta faktum, hur viktigt det är med strukturerad kod. Även fast filen fortfarande har punkter den skulle kunna förbättras inom så kan man ändå tydligt se en förbättring. Tråkigt att data i Scrutinizer saknas för att kunna göra en så pass komplett analys som möjligt. 

Mitt TIL för denna uppgift ät vikten av att reflektera över sin kod. </p>

        <h3>Kmom7-10</h3>
        <p> {{ kmom10 }} </p>

    </div>
    
</body>

{% include 'footer.html.twig' %}
